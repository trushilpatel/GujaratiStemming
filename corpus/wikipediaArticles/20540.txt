
પ્રસારણ નિયંત્રણ પ્રોટોકોલ કે ટ્રાન્સમીશન કંટ્રોલ પ્રોટોકોલ એ ઈન્ટરનેટ પ્રોટોકોલ સ્યુટ નો એક અતિમહત્વનો અને કેન્દ્રસ્થ પ્રોટોકોલ છે. ઈન્ટરનેટ પ્રોટોકોલ સ્યુટના અગત્યના અને મૂળભૂત બે ઘટકોમાનો એક એવો આ પ્રોટોકોલ સ્યુટમાં ઈન્ટરનેટ પ્રોટોકોલ નો સંપૂરક છે અને તેથીજ આ ઈન્ટરનેટ પ્રોટોકોલ સ્યુટ TCP/IP થી ઓળખાય છે. TCP ઓક્ટેટ નું પ્રસારણ એક હોસ્ટ ના પ્રોગ્રામમાંથી બીજા હોસ્તના કાર્યક્રમ સુધી વિશ્વાસનિયરીતે કરે છે. મોટેભાગના ઈન્ટરનેટ કાર્યક્રમો જેવાકે, વર્લ્ડ વાઈડ વેબ, ઈ-મેલ, રીમોટ સંચાલન અને ફાઈલ પ્રસારણ TCP પ્રોટોકોલનો ઉપયોગ કરે છે, અને બીજા કાર્યક્રમો કે જેમાં વિશ્વસનીય પ્રસારણની જરૂર નથી તેવા કાર્યક્રમો યુઝર ડેટાગ્રામ પ્રોટોકોલ નો ઉપયોગ કરે છે જે ઓક્ટેટને મોકલવા વિશ્વસનીયતા કરતા ઓછી લેટન્સી વધુ ભાર મૂકે છે. 
ઇલેક્ટ્રિકલ અને ઇલેક્ટ્રોનિક ઓફ એન્જિનિયર્સ સંસ્થા એ મે ૧૯૭૪મા “પેકેટ નેટવર્ક ઇન્ટરકોમ્યુંનીકેશન” નામનું એક ઉમેદવારીત પરિપત્ર જાહેર કર્યું . આ પરિપત્રના લેખકો Vint Cerf અને Bob Kahn કે જેમણે તેમાં એકથી વધારે નોડની વચ્ચે સ્ત્રોતની વહેચણી માટે ઉપયોગી પેકેટ-સ્વીચીંગ માટેના ઇન્ટરનેટવર્કિંગ પ્રોટોકોલ વિષે વર્ણન કર્યું હતુ. ટ્રાન્સમીશન કંટ્રોલ પ્રોગ્રામ જે આ મોડેલનો કેન્દ્રીય સંચાલિત ઘટક હતો જેણે હોસ્ટોની વચ્ચે જોડાણ-આધારિત લીકો અને ડેટાગ્રામ સેવાઓ વચ્ચે જોડાણ કર્યું. આ મોનોલીથીક પ્રસારણ સંચાલન પ્રોગ્રામ પાછળથી મોડ્યુલર સ્થાપત્યવાળા જોડાણ આધારિત ટ્રાન્સમીશન કંટ્રોલ પ્રોટોકોલ અને ઇન્ટરનેત્વર્કીંગના ઈન્ટરનેટ પ્રોટોકોલ સ્તરમાં વિભાજીત થયો. આ મોડેલ અનૌપચારિક રીતે TCP / IP તરીકે જાણીતું બન્યું છે, જોકે, ઔપચારિક રીતે તે ઈન્ટરનેટ પ્રોટોકોલ સ્યુટ તરીકે ઓળખાય છે.
TCP પ્રોટોકોલ TCP / IP સેવામાંથી પરિવહન સ્તરને અનુલક્ષે છે. TCP એપ્લિકેશન પ્રોગ્રામ અને ઇન્ટરનેટ પ્રોટોકોલ વચ્ચે એક મધ્યવર્તી સ્તર પર એક વાર્તાલાપ સેવા પૂરી પાડે છે. એટલે કે, જયારે એપ્લીકેશન પ્રોગ્રામ મોટા જથ્થામાં ડેટાને ઈન્ટરનેટ પર IPની મદદથી એક હોસ્ટથી બીજા હોસ્ટ તરફ મોકલવાનું હોય ત્યારે તે આ મોટા જથ્થાના નાના નાના ટુકડાઓ કરી અને તેની IP અરજીઓ બનાવાને બદલે તે એક અરજી TCP ને કરે છે અને TCP આ IPની વિગતોને સંભળી લે છે. IP માહિતી ના ટુકડાઓ ની આપ-લે કરી કાર્ય કરે છે. પેકેટ એ શ્રેણીબદ્ધ ઓક્ટેટ અને હેડર-ટ્રેઇલર લગાવેલ પેલોડથી બનેલા છે. હેડર પર પેકેટ-ગંતવ્ય હોય છે અને વૈકલ્પિક રીતે પેકેટ તેના નિર્દિષ્ઠસ્થાન સુધી પહોચે નહિ ત્યાંસુધી હેડરમાં રાઉટર દ્વારા ઉચિત ફેરફાર થયા કરે છે. પેલોડ એટલેકે IP દ્વારા પ્રસારિત થતો ડેટા તેને બોડી પણ કહેવાય છે. ટ્રેઇલર દરેક ટુકડાની અંતમાં લાગીને તેને સંપૂર્ણ બનાવે છે. 
નેટવર્કની ગીચતા, ટ્રાફિક લોડ બેલેન્સિંગ કે અન્ય અણધર્યા નેટવર્કના વર્તનના કારણે, IP પેકેટોનું ખોવાઈ જવું, તેની વધારાની નકલ બની જવી કે તેની ડીલેવરી ન થવી વિ. સમસ્યા ઊભી થાય તેવી શક્યતા છે. TCP આવી સમસ્યાઓને શોધે છે, ખોવાઈ ગયેલા ડેટાને પુનઃપ્રસારિત કરવાની અરજી કરે છે, અશ્રેણીબદ્ધ થયેલ ડેટાને ફરી ગોઠવે છે અને નેટવર્કની ગીચતાને ઓછી કરવા અન્ય સમસ્યાઓને ઘટાડવા મદદ પણ છે. TCP પ્રાપ્તકર્તા એકવાર મૂળ પ્રસારિત થયેલ ડેટા ઓક્ટેટ ની શ્રેણીઓને પુનઃએકત્રિત કરી લે છે અને તેનું પુષ્ટિકરણ પ્રસારિત કરે છે, પછી તેને એપ્લિએશન પ્રોગ્રામને મોકલી દેવાય છે. આમ, TCP નેટવર્કિંગ વિગતોના આધારે એપ્લિકેશન સંચાર કરાવે છે.
ઈન્ટરનેટના સૌથીવધુ લોકપ્રિય એપ્લીકેશનો જેવીકે, વર્લ્ડ વાઈડ વેબ, ઈ-મેલ, રીમોટ સંચાલન, પીયર-ટુ-પીયર ફાઈલ પ્રસારણ અને કેટલાક સ્ટ્રીમીંગ મીડિયા વિ. TCP પ્રોટોકોલનો વ્યાપક ઉપયોગ કરે છે.
TCPને ભૂલરહિત ડીલેવરી કરવા માટે શ્રષ્ઠ બનાવ્યો છે અને તેમાટે તેને સમય બાધ નથી તેથી જયારે અક્રમિક થયેલ સંદેશાને કે ખોવાઈ ગયેલ પુનઃપ્રસારિત થયેલ સંદેશાની રાહ જોવામાં TCP માં કોઇકવાર પ્રમાણમાં લાબા વિલંબ આવે છે. આવા વિલંબો રીયલ-ટાઇમ એપ્લીકેશન જેવીકે વોઈસ-ઓવર-IP માં વ્યવહારિક રીતે યોગ્ય નથી. આ પ્રકારની એપ્લીકેશનો મોટેભાગે યુસર ડેટાગ્રામ પ્રોટોકોલ પર આધારિત રીયલ-ટાઇમ ટ્રાન્સપોર્ટ પ્રોટોકોલ જેવા પ્રોટોકોલોથી ચલાવવા ભલામણ કરેલ છે. 
TCP વિશ્વસનીય સ્ટ્રીમ વિતરણ સેવા છે જે ખાતરી આપે છે કે પ્રાપ્ત થયેલ ડેટા બીટ્સ અને મોકલાવેલા ડેટા બીટ્સ યોગ્ય ક્રમબદ્ધ અને સરખા છે. જયારે પેકેટ પ્રસારણ વિશ્વાસપાત્ર નથી રહેતું ત્યારે એક હકારત્મક સંદેશ તરીકે ઓળખાતી તકનીકનો ઉપયોગથી TCP જે તે પેકેટને પુનઃપ્રસારિત કરવાની ખાતરી આપે છે. આ મૂળભૂત તકનીકમાં જરૂરી છેકે દરેક પ્રાપ્તકર્તા જયારે તેને સંપૂર્ણ અને સહીસલામત ડેટા મળે ત્યારે તે પ્રાપ્તકર્તા એક સ્વીકૃતિ સંદેશનો પ્રતિસાદ મોકલે છે. ડેટા મોકલનાર તેણે મોકલેલા દરેક ડેટાની નોધણી કરે છે. ડેટા મોકલનાર જયારે ડેટા મોકલે છે ત્યારે તેનો પ્રસારિત સમયની પણ નોધણી કરે છે અને પ્રાપ્તકર્તા પાસે થી સ્વીકૃતિ સંદેશનો પ્રતિસાદ ન મળે ત્યાં સુધી મોકલનાર ડેટાને પુનઃપ્રસારિત કરે છે. આ પુનઃપ્રસારણ ચોક્કસ સમય સુધી ચાલે છે આ પછી પણ પ્રતિસાદ ન મળતા મોકલનાર હોસ્ટ ડેટાનું પ્રસારણ અટકાવે છે. જયારે પેકેટ ખોવાઈ કે ખરાબ થાય ત્યારે આવા ટાઇમર ની જરૂરિયાત પડે છે. 
TCP નિયમોના સમૂહને સમાવે છે:જે પ્રોટોકોલો IP સાથે અને IP માટે કાર્ય કરે છે તેઓ ઈન્ટરનેટ મારફતે કમ્પ્યુટરો વચ્ચે ડેટાને “સંદેશ સ્વરૂપ એકમો મોકલે છે. જયારે IP ડેટાની ડીલેવરી સંભાળે છે અને TCP ડેટા પ્રસારણના દરેક એકમો પર નજર રાખે છે આ એકમોને સેગ્મેન્ટ કહેવાય છે, સેગ્મેન્ટો એક સંદેશ છે જે કાર્યક્ષમ રાઉટીંગ માટે નેટવર્ક મારફત વહેચાયેલ છે. દા.ત. જયારે HTML ફાઈલ વેબ સર્વરથી મોકલાય ત્યારે તે સર્વરનું TCP સોફ્ટવેર સ્તર ફાઈલના ડેટાને ક્રમિક ઓક્ટેટના સેગ્મેન્ટ માં વિભાજીત કરે છે અને ત્યારબાદ દરેકને IP સોફ્ટવેર સ્તર પર મોકલે છે. IP સ્તર આ દરેક TCP સેગ્મેન્ટમાં હેડર ઉમેરી તેનું ઇનકેપ્સુલેશન કરી તેને IP પેકેટમાં ફેરવે છે. હેડરમાં નિર્દિષ્ટ સરનામાંનો સમાવેશ થયેલો હોય છે. તેમ છતાં દરેક પેકેટ સરખા જ લક્ષ્યસ્થાન પર જવાના હોય, તેઓ નેટવર્કના જુદા જુદા રસ્તાઓ પરથી પહોચે છે. જયારે આ પેકેટો નિર્દિષ્ટ કમ્પ્યુટર પરનો ક્લાયન્ટ પ્રોગ્રામ પ્રાપ્ત કરે ત્યારે TCP સ્તર આ દરેક સેગ્મેન્ટને પુનઃસંગઠિત કરે છે અને તે ખરી રીતે ક્રમશઃ ગોઠવાયેલ છે તથા તેઓ ક્ષતિરહિત છે તેની ખાતરી એપ્લીકેશનને આપે છે.
પ્રસારણ નિયંત્રણ પ્રોટોકોલ ડેટા વહેણ માંથી ડેટા ને લઈને તેને નાના ભાગોમાં વહેચે છે અને તે દરેક ભાગમાં TCP મથાળાને ઉમેરીને તેને TCP ખંડ બનાવે છે. બાદમાં, આ TCPખંડ ઈન્ટરનેટ પ્રોટોકોલ ડેટાગ્રામમાં ઇન્કેપ્સ્યુલેટ થાય છે. TCPખંડએ પિયર વચ્ચે TCP દ્વારા માહિતીની આપલે માટે વપરાતા પેકેટ છે. 
TCP પેકેટ શબ્દનો ઉપયોગ કોઈકવાર અનૌપચારિક ઉપયોગ થાય છે, વર્તમાન પરિભાષામાં જ્યાં ખંડમાં જે TCP PDU, IP PDU માટે ડેટાગ્રામ અને ડેટા લીંક સ્તર PDU માટે ફ્રેમનોં ઉપયોગ થાય છે :
ડેટાના પ્રસારણની પ્રક્રિયા TCPના બોલવા પર અને ડેટાના બફરને દલીલો તરીકે પસાર કરીને થાય છે. TCP પેકેજો કે જે આવા બફર માંથી માહિતીને ખંડોમાં અને આવા દરેક ખંડોને તેના નિર્દિષ્ઠ સ્થાન પર મોકલવા ઈન્ટરનેટ મોડ્યુલ ને બોલાવે છે. 
એક TCP ખંડ, ડેટા અને હેડર એમ બે ખંડોમાં વહેચાયેલો હોય છે. TCP હેડર ૧૦ ફરજીયાત અને એક વૈકલ્પિક ફિલ્ડ ધરાવે છે. ડેટાનો વિભાગ હેડરને અનુસરે છે. જેમાં કાર્યક્રમના પેલોડ ડેટા સમાયેલા છે. આ ડેટાના વિભાગની લંબાઈ નો TCP-ખંડ ના હેડરમાં ઉલ્લેખ હોતો નથી. આ લંબાઈની ગણતરી IP ડેટાગ્રામની કુલ લંબાઈમાંથી TCP હેડર અને ઇન્કેપ્સુલેટ થયેલ IP હેડરની લંબાઈને બાદ કરતા મેળવી શકાય છે. 
જયારે ઓપ્શન જોડે SYN કર્યો ત્યારે તેઓ નીચે પ્રમાણે સૂચવાય છે. ઓપ્સન-કાઈન્ડ અને પ્રમાણભૂત લંબાઈ પ્રમાણે આપવામાં આવે છે.

TCP પ્રોટોકોલની કામગીરીને ત્રણ તબક્કાઓમાં વિભાજીત કરી શકાય છે. ડેટા પરિવહનના તબક્કામાં દાખલ થવા પહેલા જોડાણો યાગ્ય રીતે મલ્ટી-સ્ટેપ હેન્ડશેક પ્રક્રિયામાં સ્થાપિત થયેલા હોવા જરૂરી છે. ડેટાના પરિવહન સંપૂર્ણ થયા બાદ, જોડાણ ને રદ કરતી પ્રક્રિયા સ્થાપિત થયેલ આભાસી સરકીટો અને તેની સાથે જોડાયેલ તમામ સાધનોને મુક્ત કરે છે.
TCP જોડાણ ઓપેરેટીંગ સિસ્ટમ દ્વારા એક પ્રોગ્રામિંગ ઇન્ટરફેસ મારફતે વ્યવસ્થાપિત થાય છે કે જે સંદેશાવ્યવહાર માટેના અંતિમ બિંદુ તરીકે રજૂ થાય છે જેને ઈન્ટરનેટ સોકેટ તરીકે ઓળખાય છે. 
જોડાણ સ્થાપિત કરવા TCP ત્રિમાર્ગીય હેન્ડશેકનો ઉપયોગ કરે છે. ક્લાયન્ટ સર્વર જોડે જોડાણ કરવા પ્રયત્ન કરે તે પહેલા, સર્વર પોતાની સાથે જોડાણો કરવા માટે પોર્ટને બાંધે છે અને ત્યાંથી સંભાળવા માટે તૈયાર થાય છે આને જોડાણ માટે Passive Open થવું કહેવાય છે. એકવાર પેસીવ-ઓપન સ્થાપિત થયા બાદ, ક્લાયન્ટ તરફથી થતા પ્રયત્નને લીધે તે જોડાણ સક્રિય થાય છે. જોડાણ સ્થાપિત થવા માટે ત્રિમાર્ગીય હેન્ડશેક થાય છે :
આ જ સમયે જોઈએતો, સર્વર અને ક્લાયન્ટ બંનેને જોડાણની સ્વીકૃતિ મળી છે. ૧,૨ પગલાઓ એક દિશા માટે જોડાણ પરિમાણ સ્થાપે છે અને તેને સ્વીકૃતિ આપે છે. ૨, ૩ પગલાઓ વળતી દિશામાં જોડાણ પરિમાણ સ્થાપે છે અને તેની સ્વીકૃતિ આપે છે, આ સાથે બેતરફી સંદેશવ્યવહાર સંભવે છે. 
TCP સંપૂર્ણ બે-તરફી સેવા પૂરી પાડે છે, કે જેમાં ડેટા એક જ સમયે બંને દિશામાં પ્રવાહિત થાય છે. 
ચાર-માર્ગીય હેન્ડશેકની મદદથી જોડાણનો અંત થાય છે, દરેક બાજુના જોડાણનો અંત સ્વતંત્ર રીતે થાય છે. જયારે છેવટનાબિંદુઓ અંત ઈચ્છે છે તે સ્થિતિ હાફ-ઓફ-કનેક્શન કહેવાય જેમાં FIN પેકેટ બીજા છેવાળે મોકલાય છે, બીજો છેડો ACK પેકેટ મોકલી તેની સ્વીકૃતિ આપે છે. આથી, લાક્ષણિક ટીયર-ડાઉન માટે દરેક છેડાના TCP પરથી FIN અને ACK સેગ્મેન્ટોની જોડ જરૂરી છે. FIN/ACK આ બંનેના આદાન-પ્રદાન પરથી તારણ નીકળે છે કે, જે બાજુ પહેલું FIN મોકલે છે તે પહેલા ચોક્કસ સમયસમાપ્તિ સુધી રાહ જોવાનું પેકેટ મેળવે છે સમયનો અંત થતા જોડાણ બંધ કરે છે. આ સમયગાળા દરિમયાન જે તે સ્થાનિક પોર્ટ નવા જોડાણ માટે અનુપલબ્ધ થાય છે. જોડાણ બંધ થતા તે ઉપલબ્ધ થાય છે.
જોડાણ અધખુલ્લું હોઈ શકે છે, જેમકે જે કિસ્સામાં એક બાજુના છેડેથી જોડાણનો અંત થયો હોય પરંતુ જોડાણની બીજી તરફ જોડાણ હું યથાવત હોયતો આને અધખુલ્લા જોડાણ કહી શકાય. આવા જોડાણમાં જે બાજુએ જોડાણનો અંત કર્યો છે તે બીજા ડેટા કે માહિતી બીજી તરફ મોકલવા સક્ષમ નથી પરંતુ તેને અંત નથી કર્યો તે ડેટા મોકલવા સક્ષમ છે. બંધ થયેલ બાજુ ડેટાનું વાંચન જ્યાં સુધી બીજી બાજુનો અંત ન થાય ત્યાં સુધી કરે છે. ત્રિ-માર્ગીય હેન્ડ-શેક દ્વારા જોડાણનો અંત શક્ય છે કે, જયારે હોસ્ટ FIN સેગ્મેન્ટ હોસ્ટ ને મોકલે અને હોસ્ટ તેનો વળતો જવાબ FIN અને ACK મોકલે છે અને હોસ્ટ તેનો જવાબ ACK સાથે આપે છે. આ કદાચ સૌથી સામાન્ય પદ્ધતિ છે.
એ શક્ય છે કે બંને હોસ્ટો FIN એકસાથે મોકલે છે બાદમાં બંને માત્ર ACK માટે હોય છે. આને દ્વિ-માર્ગીય હેન્ડ-શેક ગણી શકાય ત્યારથી FIN/ACK ક્રમ સમાંતર અને બંને દિશામાં કરાય છે. કેટલાક હોસ્ટના TCP સ્ટેક કદાચ એક-માર્ગીય બંધ ક્રમ અમલમાં મુકે છે જેમકે, Linux કે HP-UX. જો હોસ્ટ સક્રિય જોડાણ એના તરફથી બંધ કરે છે, પણ તેના સ્ટેક માં પહેલેથી રહેલા ડેટા વાંચતું નથી, આ હોસ્ટ FIN ની બદલે એક RST મોકલે છે. આ TCP એપ્લીકેશન ને ખાતરી આપે છેકે તેને મોકલેલ બધા ડેટાને રીમોટ એપ્લીકેશન વાંચશે અને રિમોટ હોસ્ટ તરફથી FINની રાહ જોશે અને પછી જોડાણને સક્રિય બંધ કરે છે. જોકે, રીમોટ TCP સ્ટેક કનેક્શન એબોર્ટીગ RST અને ડેટા લોસ RST વચ્ચે તફાવત કરતો નથી. 
કેટલાક એપ્લીકેશન પ્રોટોકોલો કદાચ OSI મોડેલ સ્તરોનું TCP ઉઘાડ/બંધ હેન્ડ-શેક કે જે એપ્લીકેશન પ્રોટોકોલ ને ઉઘાડ/બંધ કરતા હેન્ડ-શેક થી ઉલ્લંઘન કરે છે – આ સઘળું સક્રિય બંધ વખતે RST સમસ્યા પર શોધી શકો છો. ઉદાહરણ તરીકે,
ઉપર આપેલા સામાન્ય કાર્યક્રમ પ્રવાહ માટે, એક TCP/IP સ્ટેક કે જે ઉપર વર્ણવેલ સાથે બાહેંધરી નથી આપતું કે બધા ડેટા અન્ય એપ્લીકેશન માટે આવે છે.
મોટાભાગના અમલીકરણો ચાલતી ઓપેરેટિંગ સિસ્ટમમાં ચાલતી પ્રક્રિયાને સત્ર સાથે જોડે છે અને તેની કોષ્ઠકમાં નોધ કરે છે. કારણકે, TCP પેકેટોમાં સત્ર ઓળખનો સમાવેશ થતો નથી, બંને છેડાઓની ઓળખાણ સત્ર માં ક્લાયન્ટ દ્વારા સંબોધન અને પોર્ટ પરથી થાય છે. સર્વર બાજુએ રહેલા સત્રોની સંખ્યા સર્વરની મેમોરી પર આધારિત છે અને તે નવા જોડાણો માટે વધી શકે છે. પણ, ક્લાયન્ટે તેના પહલા SYN મોકલવા પહેલા યાદ્ચ્છિક રીતે પોર્ટની ફાળવણી કરેલી જ હોવી જોઈએ. આ ફળવાયેલો પોર્ટ પૂરા વાર્તાલાપ દરિમયાન રહે છે અને આથી તે ક્લાયન્ટ તે જ પોર્ટ પરથી બીજું કનેક્શન કરી શકતો નથી. જો બિનજરૂરી જોડાણો બંધ કરવામાં એપ્લીકેશન નિષ્ફળ જાયતો, ક્લાયન્ટ સ્ત્રોત વગર કાર્ય કરે છે અને નવા TCP જોડાણો કરવા અસમર્થ બને છે .બંને છેડાઓએ અજાણા પેકેટોને સ્વીકારવા જ જોઈએ અને તેના માટે જગ્યા ફાળવવી જોઈએ.
TCP ની કેટલીક લાક્ષણિકતાઓ જે TCP ને યુસર ડેટાગ્રામ પ્રોટોકોલ થી અલગ કરે છે.
TCP પોર્ટ ક્રમાંક નો ઉપયોગ કરીને પ્રોસેસ-ટુ-પ્રોસેસ સંચાર કરે છે. નીચે કેટલાક જાણીતા પોર્ટ ક્રમાંકો આપ્યા છે જેનો ઉપયોગ TCP કરે છે. 
TCP એક વિશ્વસનીય ટ્રાન્સપોર્ટ પ્રોટોકોલ છે. આ પ્રોટોકોલ મોલાવેલ કે મેળવેલ સેગ્મેન્ટોની નોંધણી રાખે છે, આ સેગ્મેન્ટના મથાળામાં સેગ્મેન્ટ ક્રમાંક માટે કોઈ પણ ફિલ્ડ હોતી નથી તેની જગ્યાએ બે ફિલ્ડ હોય છે – અનુક્રમ સંખ્યા અને સ્વીકૃતિ સંખ્યા. આ બે ફીલ્ડો સેગ્મેન્ટ સંખ્યા ને બદલે બાઈટ સંખ્યા ને અનુસરે છે. TCP જોડાણમાં રહેલ દરેક પ્રસારિત ડેટા બાઈટને નંબર આપે છે. આ નંબરીંગ દરેક દિશામાં સ્વતંત્ર હોય છે અને આ નંબરીંગ યાદ્છિક રીતે પેદા થયેલ નંબર હોય છે. અનુક્રમ નંબર ચકાસે છે કે, દરેક હોસ્ટ તરફથી મોકલેલ બાઈટ પ્રસારણ દરિમયાન કોઈપણ ક્ષતિ પામ્યા વગરના, ખોવાયા નથી ને ત્યારબાદ તેની ફરીથી ક્રમઅનુસાર ગોઠવણી થાય છે. દરેક પેલોડ બાઈટના પ્રસારણ સાથે અનુક્રમ સંખ્યા પણ વધે છે. ત્રિ-માર્ગીય હેન્ડ-શેક ના પ્રથમ બે પગલાઓમાં બંને હોસ્ટ શરૂવાતી અનુક્રમ નંબર ની આપલે કરે છે. આ સંખ્યા ઇચ્છાધીન હોય છે, અને અણધારી રીતે TCP અનુક્રમ અનુમાનિત હુમલાઓ ને ટાળે છે.
TCP મુખ્યત્વે એક સંચિત સ્વીકૃતિ યોજના ઉપયોગ કરે છે, જ્યાં મેળવનાર સ્વીકૃતિ મોકલે છે જે દર્શાવે છે કે, મેળવનારને આગળના બધા મોકલાવેલ ડેટા મળી ગયેલ છે. મોકલનાર જે સેગમેન્ટમાં માહિતી ક્ષેત્રમાં પ્રથમ પેલોડ બાઇટ ક્રમ નંબર માટે અનુક્રમ નંબર ક્ષેત્ર સુયોજિત કરે છે, અને રીસીવર એક આગામી બાઇટ તેઓ પ્રાપ્ત અપેક્ષા ના ક્રમ નંબર સ્પષ્ટ સ્વીકૃતિ મોકલે છે. દા.ત. મોકલનાર હોસ્ટ ૧૦૦ ક્રમાંક ધરાવતા ચાર પેલોડ બાઈટના સેગ્મેન્ટો મોકલે છે. ત્યારબાદના ક્રમાંક ૧૦૦, ૧૦૧, ૧૦૨ અને ૧૦૩ બને છે. જયારે આ સેગ્મેન્ટો મેળવનાર હોસ્ટમાં આવી પહોચે છે ત્યારે તે મોકલનાર હોસ્ટને ૧૦૪ નો સ્વીકૃતિ ક્રમાંક જ્યાં સુધી આગલો સેગ્મેન્ટ ના મળે ત્યાં સુધી મોકલે છે.
વધુમાં, સંચિત સ્વીકૃતિઓ - TCP મેળવનાર પણ વધુ માહિતી મેળવવા પસંદગીની સ્વીકૃતિઓ મોકલે છે. જો મોકલનારને ખબર પડે કે, ખોવાઈ ગયેલા નેટવર્કને લીધે ડેટા પહોચ્યો નથી તો ડેટાનું, પુન:પ્રસારણ કરે છે.
TCP ભૂલ-નિયંત્રણની મદદથી વિશ્વસનીયતા આપે છે. ભૂલ-નિયંત્રણમાં બગડેલા, ખોવાયેલા, ક્રમિક ના હોય એવા અને ડુપ્લીકેટ સેગ્મેન્ટોને શોધવાની પદ્ધતિઓનો સમાવેશ કરેલ છે. ભૂલ-નિયંત્રણ આ ભૂલોને શોધ્યા બાદ સુધારવાનું છે. TCP ભૂલની શોધ અને તેની સુધારણા તેના ત્રણ સાધનોથી કરે છે : ચકાસણી, સ્વીકૃતિ અને ટાઈમ-આઉટ . 
દરેક સેગ્મેન્ટમાં એક ચકાસણી ફિલ્ડ હોય છે જેનો ઉપયોગ બગડેલ સેગ્મેન્ટની તપાસ કરવા થાય છે. જો સેગ્મેન્ટ દૂષિત થાય છે, તે સેગ્મેન્ટને નિર્દિષ્ટ TCP દ્વારા ફગાવી દેવામાં આવે છે અને તેને ખોવાયેલો ગણવામાં આવે છે. TCP ૧૬-બીટ ચકાસણીનો ઉપયોગ દરેક સેગ્મેન્ટમાં અનિવાર્ય પણે કરે છે. 
TCP સ્વીકૃતિ-રસીદનો ઉપયોગ ડેટા સેગ્મેન્ટ મળ્યો છે તેની ખાતરી કરવા માટે કરે છે. નિયંત્રણ સેગ્મેન્ટો જેઓ ડેટાનું વહન કરતા નથી પણ ક્રમાંક સંખ્યા અને સ્વીકૃતિ નો વપરાશ કરે છે. ACK સેગ્મેન્ટની કયારેય સ્વીકૃતિ રસીદ હોતી નથી. ACK સેગ્મેન્ટો ક્રમ નંબર કે સ્વીકૃતિ રસીદ નો વપરાશ કરતા નથી.
સેગ્મેન્ટનું પુન:પ્રસારણ ભૂલ-નિયંત્રણ પદ્ધતિના કેન્દ્રસ્થ સ્થાને છે. જયારે સેગ્મેન્ટ પ્રસારણ દરિમયાન દૂષિત થાય, ખોવાય જાય કે વિલંબિત થાય તો તેનું પુન:પ્રસારણ થાય છે. આધુનિક ઉપકરણોમાં, બે પ્રસંગો પર સેગ્મેન્ટનું પુન:પ્રસારણ થાય છે : ૧. જયારે પુન:પ્રસારણ ટાઈમર સમાપ્ત થાય ત્યારે ૨. જયારે મોકલનાર ત્રણ ડુપ્લીકેટ ACK મેળવે ત્યારે. ACK સેગ્મેન્ટ માટે પુન:પ્રસારણ ટાઈમર સુયોજિત નથી.
TCP સ્લાઈડીંગ વિન્ડોનો ઉપયોગ કરી ફલો-નિયંત્રણ હાથ ધરે છે. મોકલનાર તરફથી મોકલતા ડેટા ને મેળવનાર ના ડેટા નિયંત્રણ દ્વારા ઝીલાય છે. આનાથી મોકલનાર તરફથી વધી જતા ડેટાનું નિયંત્રણ કરવા End-to-End ફ્લો નિયંત્રણ પ્રોટોકોલનો ઉપયોગ કરે છે. TCP ક્રમાંક આપવાની પધ્ધતિથી બાઈટ આધારિત ફલો નિયંત્રણ કરે છે. TCP ફલો નિયંત્રણ માટે વિવિધ પર્યાવરણો અનુસાર તેની વાર્તાલાપની ઝડપ માં વધારો ઘટાડો કરે છે. ઉદાહરણ તરીકે, જયારે કોઈ કમ્પ્યુટર કોઈ સ્માર્ટફોનને ડેટા મોકલે ત્યારે ફોનની ડેટા મેળવવાની ક્રિયા ધીરી હોવાથી ફોન ડેટા-પ્રવાહને નિયંત્રિત કરે છે. 
TCP સ્લાઈડીંગ વિન્ડોની મદદથી ફલો નિયંત્રણ કરે છે. દરેક TCP સેગ્મેન્ટમાં મેળવનાર તેની રીસીવ-વિન્ડો ફિલ્ડમાં સ્પષ્ટ કરે છે કે, તે વધારાનો કેટલો ડેટા મેળવી શકે છે તે પ્રમાણે જોડાણ માટે બફર તૈયાર થાય છે. મોકલનાર હોસ્ટ આટલાજ ડેટા મોકલે છે અને બીજા ડેટા મોકલતા પહેલા માટે મેળવનાર હોસ્ટ તરફથી સ્વીકૃતિ રસીદ અને નવા વિન્ડો-સુધારાની રાહ જોવી જ પડે છે. 
જયારે મેળવનાર હોસ્ટ દ્વારા ૦ માપની વિન્ડોની જાહેરાત થતા, મોકલનાર હોસ્ટ ડેટા મોકલવાનું બંધ કરે છે અને ટાઈમર ચાલુ કરી દે છે. આ ટાઈમરનો ઉપયોગ કરીને TCP ડેડલોક પરિસ્થિતિથી બચાવે છે. જયારે મેળવનાર હોસ્ટ અનુગામી વિન્ડો-માપના સુધારાને ગુમાવે છે ત્યારે મોકલનાર જ્યાં સુધી નવી વિન્ડો-માપ સુધારો મળે નહિ ત્યાં સુધી ડેટા મોક્લાતો નથી. જયારે ટાઈમર નિવૃત થાય ત્યાર બાદ મોકલનાર TCP એક નાનું સેગ્મેન્ટ મોકલી ખાતરી કરે છે કે, મેળવનાર હોસ્ટ આનો કોઈ જવાબ નવી સ્વીકૃતિ રસીદ અને વિન્ડો-માપથી આપે છે કેમ...!
જો મેળવનાર તેની અંદર આવતા ડેટા પર નાના વૃદ્ધિદરે પ્રક્રિયા કરતો હોયતો, તે હોસ્ટ તે પ્રમાણે નાના માપની પ્રાપ્ત-વિન્ડોની જાહેરાત કરે છે. આ અવિવેકી વિન્ડો લક્ષણસમૂહ તરીકે ઓળખાય છે કેમકે, જ્યાં સુધી TCP સેગ્મેન્ટમાં માત્ર થોડાજ બાઈટ ભરીને મોકલવા બિનકાર્યક્ષમ હોય, અને જે તે TCP મથાળા માટે મોટા ઓવરહેડ આપે છે. TCP મોકલનાર અને મેળવનાર બંને મોટેભાગે નાના સેગ્મેન્ટોને વાંરવારન મોકલવા પડે તે માટે તાર્કિક ફલો નિયંત્રણની નિમણુંક કરે છે. મોકલનારની બાજુથી અવિવેકી વિન્ડોના લક્ષણોને ટાળનાર તર્ક ને Nagle અલ્ગોરીથમ કહેવાય છે.
TCPના મુખ્ય પાસામાનું એક પાસું ભીડ નિયંત્રણ છે. TCP ઉચી ગુણવત્તા મેળવવા એકથી વધારે પધ્ધતિઓનો ઉપયોગ કરી ડેટા-ભીડ ને ઓછી કરવા પ્રયત્નશીલ રહે છે, જ્યાં વિવિધ પ્રકારની તીવ્રતાવાળા ઓર્ડરના કારણે નેટવર્કનું પ્રદર્શનની ગુણવત્તા ઓછી થાય છે. આ પદ્ધતિઓ નેટવર્કમાં પ્રવેશતા ડેટાના પ્રવાહનું નિયંત્રણ કરે છે અને પ્રવાહના દરને વધી જતા અટકાવે છે જેથી પ્રવાહ-પતનની સ્થિતિ બનતી નથી. તેઓ પ્રવાહ વચ્ચે Min-Max fair ની યોગ્ય ફાળવણી કરે છે.
ડેટા મોકલ્યા ની સ્વીકૃતિ કે સ્વીકૃતિ ના અભાવ નો ઉપયોગ મોકલનાર TCP મોકલનાર કે મેળવનાર તેમની વચ્ચેની નેટવર્ક સ્થિતિને જાણવા કરે છે. ટાઈમરો સાથે જોડી, TCP મોકલનાર અને રીસીવરો માહિતી ની ફ્લો વર્તણૂક બદલી શકે છે. આ સામાન્ય રીતે વધુ ભીડ નિયંત્રણ અને / અથવા નેટવર્ક કન્જેશન પરિહાર તરીકે ઓળખવામાં આવે છે.
આધુનિક અમલીકરણો ધરાવતું TCP ચાર અલગોરિધમ વાપરે છે: ધીમી-શરૂઆત, ભીડ પરિહાર, ઝડપી પુન:પ્રસરણ અને ઝડપી પુન:પ્રાપ્તિ. 
વધારામાં, મોકલનાર અનુમાનિત રી-ટ્રાન્સમીશન ટાઈમઆઉટ નો ઉપયોગ કરે છે આ RTO મેળવનાર અને મોકલનાર વચ્ચેના અનુમાનિત રાઉન્ડ-ટ્રીપ-ટાઈમ આધારિત છે. આ ટાઈમરના વર્તન વિષે RFC 6298માં વિવરણ છે. TCP નુકશાન નિયંત્રિત કરવા તેની વિશ્વાસપાત્રતા વધારવા ભૂલો ઘટાડે છે, ભીડ ની વ્યવસ્થા કરે છે. TCP કન્જેશન પરિહાર અલગોરિધમનો ફેરફારો હોય છે.
મહતમ સેગ્મેન્ટ કદ ડેટાનો સહુથી મોટો જથ્થો દર્શાવે છે જે બાઈટમાં સ્પષ્ટ થયેલ છે, જે એકજ સેગ્મેન્ટમાં સમાવેશ કરે છે. શ્રેષ્ઠ પ્રભાવ માટે, MSS નું કદ નાનું સેટ થાય છે જેથી IP ફ્રેગ્મેન્ટેશન ને ટાળે છે પણ આનાથી પેકેટ નુકશાન અને તેનું પુન;પ્રસારણ અતિશય વધે છે. ખાસ કરીને MSS દરેક MSS વિકલ્પ વાપરી રહ્યા જે TCP જોડાણ અધિષ્ઠાપિત છે, કે જે કિસ્સામાં તે મહત્તમ ટ્રાન્સમિશન નેટવર્ક્સ ની ડેટા લિંક લેયર એકમ માપ પરથી આવ્યો છે બાજુ દ્વારા જાહેરાત કરી છે, જે માટે મોકલનાર અને મેળવનાર સીધા જોડાયેલ છે. 
વધતો જતો સ્વીકૃતિ મૂળ TCP પ્રોટોકોલ દ્વારા કામે યોજના પર સ્પષ્ટ રીતે નિર્ભર રહેતાં બિનકાર્યક્ષમતાને દોરી જ્યારે પેકેટો ગુમાવી શકે છે. દા.ત. ધારોકે, ૧૦,૦૦૦ બાઈટ ને ૧૦ જુદા જુદા TCP સેગ્મેન્ટોમાં મોકલ્યા છે અને પહેલું સેગ્મેન્ટ પ્રસારણ દરિમયાન ખોવાય જાય છે. આ શુદ્ધ સ્વીકૃતિ સંચિત પ્રોટોકોલ માં, મેળવનાર એવું કહી શકતો નથી કે, તેને ૧૦૦૦ થી ૯૯૯૯ બાઈટ સફળતાપૂર્વક મળ્યા છે પણ ૦થી૯૯૯ મળ્યા નથી આના કારણે મોકલનાર ફરીથી બધ્ધા ૧૦,૦૦૦ બાઈટ પાછા મોકલે છે. 
આવી સમસ્યાને દુર કરવા TCP પસંદગીયુક્ત સ્વીકૃતિ નામના વિકલ્પનો ઉપયોગ કરે છે જે RFC 2018 માં વ્યાખ્યાયિત છે. જે મેળવનારને યોગ્ય રીતે મળેલ વિરત સેગ્મેન્ટના બ્લોકના સ્વીકાર માટે પરવાનગી આપે છે. વધુમાં, છેલ્લા સલગ્ન ક્રમ નંબરના બાઈટ ને સફળતાપૂર્વક પ્રાપ્ત થાય છે. સ્વીકૃતિઓ SACK બ્લોકને એક નંબર આપે છે. જ્યાં દરેક SACK બ્લોકને ભારપૂર્વક શરૂવાત અને અંતના ક્રમિક નંબરો અપાય છે જે સેગ્મેન્ટો મેળવનારને યોગ્યરીતે મળે છે. ઉપરના ઉદાહરણમાં, મેળવનાર SACK જોડે ક્રમિક નંબર ૧૦૦૦ અને ૯૯૯૯ મોકલે છે. તેથી મોકલનાર માત્ર પહેલું સેગ્મેન્ટ પુન: મોકલે છે.
SACK નો વિકલ્પ ફરજીયાત નથી તે ત્યારે જ ઉપયોગમાં આવે છે જયારે જો બંને પક્ષો તેને ટેકો આપતા હોય. જયારે જોડાણના સ્થપાન વખતે આની વાટાઘાટો થાય છે. SACK, જે TCP મથાળા ના વૈકલ્પિક ભાગ વાપરે છે. નું માળખું) SACK નો બહોળા પ્રમાણમાં ઉપયોગ થાય છે – દરેક લોકપ્રિય TCP સ્ટેક તેને ટેકો આપે છે. પસંદગીયુક્ત સમર્થનનો ઉપયોગ સ્ટ્રીમ કંટ્રોલ ટ્રાન્સમીશન પ્રોટોકોલ માં થાય છે.
ઊંચા બેન્ડવિડ્થ નેટવર્ક્સ વધુ કાર્યક્ષમ ઉપયોગ માટે મોટી TCP વિન્ડો માપ ઉપયોગ કરી શકે છે. જે TCP વિન્ડો માપ ક્ષેત્ર માહિતીના ફ્લો નિયંત્રિત અને તેની કિંમત 2 વચ્ચે અને 65.535 બાઇટ્સ સુધી મર્યાદિત છે. કારણકે, તેના ફિલ્ડનું કદ વધારી શકાતું નથી, માપન પરિબળ વપરાય છે. TCP વિન્ડો માપનનો વિકલ્પ RFC 1323 મુજબ, તેનું મહતમ કદ ૬૫,૫૩૫ થી ૧ ગીગબીટ સુધીનું હોઈ શકે. મોટા વિન્ડોનું કદ તેના માટે જરૂરી TCP ટ્યુનીંગ પ્રમાણે ફેરફાર પામે છે. 
વિન્ડો માપનનો વિકલ્પનો ઉપયોગ TCP ત્રિમાર્ગીય હેન્ડ-શેક વખતે થાય છે. વિન્ડો-માપનની કિમંત ૧૬-બીટની વિન્ડો-માપની ફિલ્ડ ની ડાબી-સ્થાનાંતરના બીટ્સની સંખ્યાને દર્શાવે છે. વિન્ડો-માપન ની કિમંત ૦ થી ૧૪ સુધીની હોઈ શકે જે દરેક દિશામાં સ્વતંત્ર હોઈ શકે. બંને પક્ષો તેના SYN સેગ્મેન્ટમાં વિકલ્પો મોકલે છે જે જે-તે દિશામાં વિન્ડો-સ્કેલીંગને સક્રિય કરે છે. 
કેટલાક રાઉટર અને પેકેટ ફાયરવોલ વિન્ડો-માપન ને પ્રસારણ દરિમયાન પુન: લખે છે. આનાથી મોકલનાર કે મેળવનાર બાજુઓ જુદા જુદા માપવાળી TCP વિન્ડો-માપ મળવાની શક્યતા વધે છે. આ અસ્થિર ટ્રાફિક પરિણામેં છે જે ઘણું જ ધીમું હોય છે. જયારે ખામીયુક્ત રાઉટરથી બનેલા મોકલનારા અને મેળવનારા માર્ગથી જોડેલ સ્થળોને જોડ્યા હોય ત્યારે આ સમસ્યા જોવા મળે છે 
TCP સમયનોધો, RCF 1323માં વ્યખ્યાતીત છે, જે TCPને સેગ્મેન્ટો ક્યારે મોકલાયા હતા તે નક્કી કરવા મદદ કરે છે. TCP સમયનોંધ સામાન્ય રીતે સીસ્ટમની ઘડિયાળ પ્રમાણે ગોઠવાયેલ હોતી નથી પરંતુ કોઈક યાદ્છિક કીમતથી શરૂઆત પામેલ હોય છે. ઘણી ઓપેરેટીંગ સિસ્ટમ કમ્પ્યુટર સિસ્ટમની ઘડિયાળનો સમય વિતતા સમયનોંધમાં વધારો કરશે, જોકે, RFC આ માટે પ્રમાણસર પ્રયત્નો કરશે. 
સમયનોંધના બે ફિલ્ડ છે.
TCP પ્રોટેક્શન અગેન્સ્ટ રેપડ સ્વીક્વંસ નંબર્સ  નામના અલ્ગોરીથમનો ઉપયોગ કરે છે. વધુ વિગત માટે RFC 1323 જુઓ. PAWS નો ઉપયોગ જયારે TCP વિન્ડોનું માપ શક્ય ક્રમિક સંખ્યા થી વધે ત્યારે થાય છે. જયારે સંભવિત પેકેટનું પુન:પ્રસારણ થાય થાઉં હોય ત્યારે તે એક પ્રશ્ન પુછાય કે “આ ક્રમિક સંખ્યા પહેલા ૪ જીબી માં હતી કે બીજા માં ?” અને સમયનોંધ ના ઉપયોગથી ગાંઠ તૂટે છે. 
RFC 1323 ના વિભાગ ૨.૨ માં ખોટી રીતે દર્શાવ્યુ છે કે, વિન્ડો માપ ૨^૧૪ સુધીનું જ એટલે કે ૧ જીબી . સાથે Eifel શોધન અલ્ગોરીથમ TCP સમય-નોંધ નો ઉપયોગ કરી નક્કી કરે છે કે, જો પુન:પ્રસારણ થાય છે કારણકે સેગ્મેન્ટો ખોવાય જાય છે કે અક્રમિક થાય છે. 
અર્જન્ટ ડેટા TCP એ પ્રોટોકોલ સ્ટ્રીમ આધારિત છે. આનો અર્થ એ થાય કે માહિતી બાઇટ્સ એક સ્ટ્રીમ તરીકે અરજી પ્રક્રિયામાંથી TCP માટે રજૂ કરવામાં આવે છે. ડેટા દરેક બાઈટ પ્રવાહમાં એક સ્થિતિ ધરાવે છે. જો કે, તે પ્રસંગે એક અરજી કાર્યક્રમ તાકીદના બાઇટ્સ મોકલે છે. આનો અર્થ એ થાય કે અરજી કાર્યક્રમ ડેટા નો ભાગ મોકલીને પ્રાપ્ત એપ્લિકેશન કાર્યક્રમ ને ક્રમ બહાર વાંચવા માંગે છે.
આ ઉકેલ માટે મોકલનાર તેના બીટ સમૂહ સાથે એક URG બીટ મોકલે છે. આ બીટ દ્વારા મોકલનાર એપ્લીકેશન પ્રોગ્રામ મેળવનાર TCPને જણાવે છે કે, પ્રવાહનો આ ભાગ અર્જન્ટ છે. મોકલનાર TCP એક સેગ્મેન્ટ બનાવે છે અને તેની શરૂઆતમાં અર્જન્ટ ડેટા ભરે છે અને બાકીના ભાગમાં સામાન્ય ડેટા બફરમાંથી ભરે છે. હેડરની ફિલ્ડમાં તાકીદનું નિર્દેશક દર્શાવે છે કે અહી અર્જન્ટ ડેટા નો અંત થાય છે અને સામાન્ય ડેટા શરૂ થાય છે. 
જયારે મેળવનાર TCP સેગ્મેન્ટ જોડે URG બીટ મેળવે છે ત્યારે તે અર્જન્ટ ડેટા ને સેગ્મેન્ટમાંથી તાકીદના નિર્દેશકની મદદથી છુટા કરે છે અને તેને મેળવનાર એપ્લીકેશન પ્રોગ્રામ સુધી પહોચાડે છે. 
જયારે એક સેગ્મેન્ટને વિલંબ થાય, ગુમ થાય કે તેને છોડી દેવામાં આવે ત્યારે તેના પગલે સેગ્મેન્ટોને ક્રમ બહાર ઘોષિત કરી દેવામાં આવે છે. મૂળભૂત રીતે TCP ને બધા અક્રમિક સેગ્મેન્ટોને કાઢી નાખવા ડીઝાઇન કર્યો હતો, તેનું પરિણામ એ આવ્યું કે, ગુમ થયેલ સેગ્મેન્ટ સાથે તે પછીના સેગ્મેન્ટોનું પુન:પ્રસારણ કરવું પડતું. આજે મોટેભાગેના બધા ઉપકરણો અક્રમિક સેગ્મેન્ટો ને ફગાવી દેતું નથી પણ તેને હંગામી ધોરણે સંગ્રહ કરી તેને અક્રમિક નામ આપે છે અને ખોવાયેલ સેગ્મેન્ટોને પહોચવાની રાહ જુએ છે. નોંધીલો, કે આ અક્રમિક સેગ્મેન્ટોને પ્રક્રિયા સુધી મોકલતું નથી. TCP સેગ્મેન્ટોને ક્રમમાજ પ્રક્રિયામાં મોકલવાની ખાતરી આપે છે.
TCP જુદી જુદી રીતે હુમલાઓનો ભોગ બની શકે છે. TCP પર થયેલ સંપૂર્ણ સુરક્ષા આકરણી ના પરિણામોને ૨૦૦૯માં પ્રદશિત કર્યા હતા. અને હાલમાં તેને IETF અપનાવી રહ્યું છે. 
દુષિત હુમલાખોર તરફથી બનાવટી IP એડ્રેસોની મદદ લઇને વારંવાર હેતુપૂર્વક SYN પેકેટો સર્વર પર મોકલવામાં આવે છે, સર્વર આ SYN પેકેટો ને વળતો જવાબ SYN+ACK સાથે આપે છે. આવા પેકેટો નો મારો વારંવાર અને મોટા પ્રમાણમાં હુમલાખોર દ્વારા થાય છે જેથી સર્વરના ઘણાબધા સ્ત્રોતોનો બિન-જરૂરી ઉપયોગ થાય છે આ ઉપયોગ થોડા સમય પછી તેની ચરમસીમા પર પહોચતા સર્વરની કાર્ય-પ્રણાલી ખોરવાઈ છે કે સર્વર કાર્ય કરતુ બંધ થાય છે. આને SYN ફલડ હુમલો કહે છે. આવી સમસ્યાઓ ના ઉકેલ મા SYN કુકીઝ અને ક્રીપ્ટોગ્રાફિક કોયડાઓનો સમાવેશ થાય છે. સ્ટોકસ્ટ્રેસ પણ આ જ પ્રકારનો હુમલો છે, જે સિસ્ટમના સ્ત્રોતોના વ્યવસ્થાપનના પ્રદર્શનમાં ઘટાડો કરે છે. ઉન્નત પ્રકારના DoS હુમલાઓમાં સંડોવાયેલા TCP Persist ટાઈમર કે જેનું વિશ્લેષણ Phrack#66 પર થયું હતું. 
હુમલાખોર દ્વારા એક TCP સત્રને છુપાઈને અવલોકવામાં આવે છે અને તેના પેકેટોને અડધેથી પુન:દિશામાન કરાય છે આને જોડાણનું અપહરણ કહી શકાય. આમ કરવા માટે હુમલાખોર બહારની તરફ જતી સંચારની ક્રમિક સંખ્યાઓનો અભ્યાસ કરે છે અને તેના જેવા આગામી ખોટા સેગ્મેન્ટો બનાવી પ્રવાહિત કરે છે. આવા સરળ અપહરણનું પરિણામ એ આવે છે કે, જે તે ખામીવાળું પેકેટ બીજા છેડે સ્વીકારાય છે અને જયારે મેળવનાર હોસ્ટ જોડાણના બીજા છેડે જાણ કરે છે કે તેને એક પેકેટ વધુ મળ્યું છે અને તેઓ સુમેળ ખોઈ નાખે છે. અપહરણ કદાચ ARP કે રાઉટીંગ હુમલાઓ સાથે જોડાયેલ છે જેઓ પેકેટના પ્રવાહ- નિયંત્રણની પરવાનગી આપે છે, જેથી કહી શકાય કે, TCP જોડાણના અપહરણ માટે નિયંત્રણ અહીંથી મળે છે. 
જયારે પ્રારંભિક ક્રમિત સંખ્યા સરળતાથી વિચારી શકાતી RFC 1948 પહેલા ત્યારે જુદા IP એડ્રેસનો સ્વાંગ સરળ હતો. આથી હુમલાખોર આડસટ્ટે પેકેટોની ઘટમાળોને મોકલી આપતા મેળવનાર હોસ્ટને એમ લાગે છે આ પેકેટો જુદા જુદા IP એડ્રેસ પરથી આવી રહ્યા છે અને તેની પુરતી ખાતરી થતી નથી તે ARP કે રાઉટીંગ હુમલાઓ છે.
TCP જોડાણના છેવાડાના હોસ્ટ કે ઈન્ટરનેટ સોકેટ વચ્ચે પોર્ટ નંબરનો ઉપયોગ કરી મોકલનાર અને મેળવનાર એપ્લીકેશનને ઓળખે છે. જોડાણની દરેક બાજુ મોકલનાર કે મેળવનાર એપ્લીકેશન વડે ૧૬-બીટના પોર્ટ નંબર થી અનામત થયેલ હોય છે. આવી પહોચેલ TCP ડેટા પેકેટ તેના સોકેટની મદદથી તેની સાથેનો સલગ્ન ચોક્કસ પોર્ટને ઓળખી લે છે આ સોકેટ સ્ત્રોત હોસ્ટ અડ્રેસ, સ્ત્રોત પોર્ટ, નિર્દિષ્ટ એડ્રેસ સ્ત્રોત અને નિર્દિષ્ટ પોર્ટની મેળવણી હોય છે. આનો અર્થ એ થાય કે સર્વર કમ્પ્યુટર અનેક સેવાઓ સાથે અનેક ગ્રાહકો સાથે સાથે પૂરી પાડે છે શકે છે, લાંબા તરીકે ક્લાઈન્ટ એક ગંતવ્ય બંદર વિવિધ સ્ત્રોત પોર્ટ પરથી કોઇ પણ એક સાથે જોડાણો શરૂ કાળજી લે છે.
પોર્ટ એડ્રેસના મુખ્યત્વે ત્રણ પ્રકાર છે : જાણીતા પોર્ટ, નોંધાયેલા પોર્ટ અને ક્રિયાશીલ/ખાનગી પોર્ટ. જાણીતા પોર્ટની સોંપણી ઈન્ટરનેટ એસાઈન નંબર ઓથોરીટી કરે છે. મોટેભાગે જાણીતી એપ્લીકેશન સર્વર તરીકે ચાલતી હોય છે અને પરોક્ષ રીતે આ પોર્ટ સાથે સલગ્ન જોડાણની રાહ જોયા કરે છે. કેટલાક ઉદાહરણો : FTP, SSH, Telnet, SMTP, SSL અને HTTP . નોધાયેલ પોર્ટનો ઉપયોગ મોટેભાગે અંતિમ વપરાશકર્તાની એપ્લીકેશન દ્વારા થાય છે. આ પોર્ટ નંબરની મદદથી આવી એપ્લીકેશનો તેના ક્લાયન્ટ હોસ્ટ જોડે જોડાણ સાધે છે. ખાનગી પોર્ટ નંબર વપરાશકર્તા પોત્તાના અંગત નેટવર્કમાં પોતાની રીતે આપી શકે છે. જયારે એકથી વધારે ક્લાયન્ટ હોસ્ટ, જાણીતા પોર્ટ ધરાવતી એપ્લીકેશન સર્વર જોડે જોડાણ કરે ત્યારે જુદા જુદા ક્લાયન્ટો જુદા જુદા ક્રિયાશીલ પોર્ટનો ઉપયોગ કરે છે.
TCP વાયર આધારિત નેટવર્ક માટે શ્રેષ્ઠ છે. કોઈપણ પેકેટ નુકશાન પાછળ નેટવર્ક કન્જેશનને જવાબદાર ગણી અને સાવચેતી સ્વરૂપે ભીડ વિન્ડો માપ નાટકીય રીતે ઘટે છે. જો કે, વાયરલેસ લીન્કોના અનુભવથી જોઈ શકાયું છે કે તેમાં સામાન્ય રીતે કે કોઈક વાર ડેટા નુકશાની થાય છે જેની પાછળ લીંક નું લુપ્ત થવું, શેદોઇન્ગ, હેન્ડ ઓફ કે બીજી રેડીઓની અસરો ગણી શકાય પણ ડેટા-ભીડ ગણી ન શકાય. 
વાયરલેસ સમસ્યા, નિરાકરણ લાવવા માટે સંખ્યાબંધ વૈકલ્પિક ભીડ નિયંત્રણ એલ્ગોરિધમ્સ જેવાકે, વેગાસ, વેસ્ટવુડ, Veno અને સાન્ટા ક્રૂઝ નીમદદ લેવાય છે.

